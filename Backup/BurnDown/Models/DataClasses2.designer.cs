#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BurnDownm.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="bdownDB")]
	public partial class DataClasses2DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertsubTask1(subTask1 instance);
    partial void UpdatesubTask1(subTask1 instance);
    partial void DeletesubTask1(subTask1 instance);
    partial void InsertsubTask(subTask instance);
    partial void UpdatesubTask(subTask instance);
    partial void DeletesubTask(subTask instance);
    #endregion
		
		public DataClasses2DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["bdownDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<subTask1> subTask1s
		{
			get
			{
				return this.GetTable<subTask1>();
			}
		}
		
		public System.Data.Linq.Table<subTask> subTasks
		{
			get
			{
				return this.GetTable<subTask>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.subTasks")]
	public partial class subTask1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _subTaskId;
		
		private string _subTaskName;
		
		private bool _completed;
		
		private int _parentTask;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsubTaskIdChanging(int value);
    partial void OnsubTaskIdChanged();
    partial void OnsubTaskNameChanging(string value);
    partial void OnsubTaskNameChanged();
    partial void OncompletedChanging(bool value);
    partial void OncompletedChanged();
    partial void OnparentTaskChanging(int value);
    partial void OnparentTaskChanged();
    #endregion
		
		public subTask1()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subTaskId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int subTaskId
		{
			get
			{
				return this._subTaskId;
			}
			set
			{
				if ((this._subTaskId != value))
				{
					this.OnsubTaskIdChanging(value);
					this.SendPropertyChanging();
					this._subTaskId = value;
					this.SendPropertyChanged("subTaskId");
					this.OnsubTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subTaskName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string subTaskName
		{
			get
			{
				return this._subTaskName;
			}
			set
			{
				if ((this._subTaskName != value))
				{
					this.OnsubTaskNameChanging(value);
					this.SendPropertyChanging();
					this._subTaskName = value;
					this.SendPropertyChanged("subTaskName");
					this.OnsubTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_completed", DbType="Bit NOT NULL")]
		public bool completed
		{
			get
			{
				return this._completed;
			}
			set
			{
				if ((this._completed != value))
				{
					this.OncompletedChanging(value);
					this.SendPropertyChanging();
					this._completed = value;
					this.SendPropertyChanged("completed");
					this.OncompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentTask", DbType="Int NOT NULL")]
		public int parentTask
		{
			get
			{
				return this._parentTask;
			}
			set
			{
				if ((this._parentTask != value))
				{
					this.OnparentTaskChanging(value);
					this.SendPropertyChanging();
					this._parentTask = value;
					this.SendPropertyChanged("parentTask");
					this.OnparentTaskChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.subTasks")]
	public partial class subTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _subTaskId;
		
		private string _subTaskName;
		
		private bool _completed;
		
		private int _parentTask;
		
		private string _notes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsubTaskIdChanging(int value);
    partial void OnsubTaskIdChanged();
    partial void OnsubTaskNameChanging(string value);
    partial void OnsubTaskNameChanged();
    partial void OncompletedChanging(bool value);
    partial void OncompletedChanged();
    partial void OnparentTaskChanging(int value);
    partial void OnparentTaskChanged();
    partial void OnnotesChanging(string value);
    partial void OnnotesChanged();
    #endregion
		
		public subTask()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subTaskId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int subTaskId
		{
			get
			{
				return this._subTaskId;
			}
			set
			{
				if ((this._subTaskId != value))
				{
					this.OnsubTaskIdChanging(value);
					this.SendPropertyChanging();
					this._subTaskId = value;
					this.SendPropertyChanged("subTaskId");
					this.OnsubTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subTaskName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string subTaskName
		{
			get
			{
				return this._subTaskName;
			}
			set
			{
				if ((this._subTaskName != value))
				{
					this.OnsubTaskNameChanging(value);
					this.SendPropertyChanging();
					this._subTaskName = value;
					this.SendPropertyChanged("subTaskName");
					this.OnsubTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_completed", DbType="Bit NOT NULL")]
		public bool completed
		{
			get
			{
				return this._completed;
			}
			set
			{
				if ((this._completed != value))
				{
					this.OncompletedChanging(value);
					this.SendPropertyChanging();
					this._completed = value;
					this.SendPropertyChanged("completed");
					this.OncompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentTask", DbType="Int NOT NULL")]
		public int parentTask
		{
			get
			{
				return this._parentTask;
			}
			set
			{
				if ((this._parentTask != value))
				{
					this.OnparentTaskChanging(value);
					this.SendPropertyChanging();
					this._parentTask = value;
					this.SendPropertyChanged("parentTask");
					this.OnparentTaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notes", DbType="NChar(2000)")]
		public string notes
		{
			get
			{
				return this._notes;
			}
			set
			{
				if ((this._notes != value))
				{
					this.OnnotesChanging(value);
					this.SendPropertyChanging();
					this._notes = value;
					this.SendPropertyChanged("notes");
					this.OnnotesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
