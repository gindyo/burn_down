#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BurnDown
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="bdownDB")]
	public partial class DB : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertproject(BurnDown.Models.project instance);
    partial void Updateproject(BurnDown.Models.project instance);
    partial void Deleteproject(BurnDown.Models.project instance);
    partial void Insertdevloper(BurnDown.Models.devloper instance);
    partial void Updatedevloper(BurnDown.Models.devloper instance);
    partial void Deletedevloper(BurnDown.Models.devloper instance);
    partial void Inserttask(BurnDown.Models.task instance);
    partial void Updatetask(BurnDown.Models.task instance);
    partial void Deletetask(BurnDown.Models.task instance);
    #endregion
		
		public DB() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["bdownDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BurnDown.Models.project> projects
		{
			get
			{
				return this.GetTable<BurnDown.Models.project>();
			}
		}
		
		public System.Data.Linq.Table<BurnDown.Models.devloper> devlopers
		{
			get
			{
				return this.GetTable<BurnDown.Models.devloper>();
			}
		}
		
		public System.Data.Linq.Table<BurnDown.Models.task> tasks
		{
			get
			{
				return this.GetTable<BurnDown.Models.task>();
			}
		}
		
		public System.Data.Linq.Table<BurnDown.Models.subTask> subTasks
		{
			get
			{
				return this.GetTable<BurnDown.Models.subTask>();
			}
		}
	}
}
namespace BurnDown.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.projects")]
	public partial class project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _projectId;
		
		private string _projectName;
		
		private int _leadDeveloper;
		
		private int _priority;
		
		private EntitySet<task> _tasks;
		
		private EntityRef<devloper> _devloper;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprojectIdChanging(int value);
    partial void OnprojectIdChanged();
    partial void OnprojectNameChanging(string value);
    partial void OnprojectNameChanged();
    partial void OnleadDeveloperChanging(int value);
    partial void OnleadDeveloperChanged();
    partial void OnpriorityChanging(int value);
    partial void OnpriorityChanged();
    #endregion
		
		public project()
		{
			this._tasks = new EntitySet<task>(new Action<task>(this.attach_tasks), new Action<task>(this.detach_tasks));
			this._devloper = default(EntityRef<devloper>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int projectId
		{
			get
			{
				return this._projectId;
			}
			set
			{
				if ((this._projectId != value))
				{
					this.OnprojectIdChanging(value);
					this.SendPropertyChanging();
					this._projectId = value;
					this.SendPropertyChanged("projectId");
					this.OnprojectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string projectName
		{
			get
			{
				return this._projectName;
			}
			set
			{
				if ((this._projectName != value))
				{
					this.OnprojectNameChanging(value);
					this.SendPropertyChanging();
					this._projectName = value;
					this.SendPropertyChanged("projectName");
					this.OnprojectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leadDeveloper", DbType="Int NOT NULL")]
		public int leadDeveloper
		{
			get
			{
				return this._leadDeveloper;
			}
			set
			{
				if ((this._leadDeveloper != value))
				{
					if (this._devloper.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnleadDeveloperChanging(value);
					this.SendPropertyChanging();
					this._leadDeveloper = value;
					this.SendPropertyChanged("leadDeveloper");
					this.OnleadDeveloperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priority", DbType="Int NOT NULL")]
		public int priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="project_task", Storage="_tasks", ThisKey="projectId", OtherKey="project")]
		public EntitySet<task> tasks
		{
			get
			{
				return this._tasks;
			}
			set
			{
				this._tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="devloper_project", Storage="_devloper", ThisKey="leadDeveloper", OtherKey="developerId", IsForeignKey=true)]
		public devloper devloper
		{
			get
			{
				return this._devloper.Entity;
			}
			set
			{
				devloper previousValue = this._devloper.Entity;
				if (((previousValue != value) 
							|| (this._devloper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._devloper.Entity = null;
						previousValue.projects.Remove(this);
					}
					this._devloper.Entity = value;
					if ((value != null))
					{
						value.projects.Add(this);
						this._leadDeveloper = value.developerId;
					}
					else
					{
						this._leadDeveloper = default(int);
					}
					this.SendPropertyChanged("devloper");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.project1 = this;
		}
		
		private void detach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.project1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.devlopers")]
	public partial class devloper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _developerId;
		
		private string _firstName;
		
		private string _lastName;
		
		private string _email;
		
		private string _phone;
		
		private System.Nullable<int> _hoursPerDayAvailable;
		
		private EntitySet<task> _tasks;
		
		private EntitySet<project> _projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndeveloperIdChanging(int value);
    partial void OndeveloperIdChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnhoursPerDayAvailableChanging(System.Nullable<int> value);
    partial void OnhoursPerDayAvailableChanged();
    #endregion
		
		public devloper()
		{
			this._tasks = new EntitySet<task>(new Action<task>(this.attach_tasks), new Action<task>(this.detach_tasks));
			this._projects = new EntitySet<project>(new Action<project>(this.attach_projects), new Action<project>(this.detach_projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_developerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int developerId
		{
			get
			{
				return this._developerId;
			}
			set
			{
				if ((this._developerId != value))
				{
					this.OndeveloperIdChanging(value);
					this.SendPropertyChanging();
					this._developerId = value;
					this.SendPropertyChanged("developerId");
					this.OndeveloperIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="NChar(20)")]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NChar(30)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NChar(12)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hoursPerDayAvailable", DbType="Int")]
		public System.Nullable<int> hoursPerDayAvailable
		{
			get
			{
				return this._hoursPerDayAvailable;
			}
			set
			{
				if ((this._hoursPerDayAvailable != value))
				{
					this.OnhoursPerDayAvailableChanging(value);
					this.SendPropertyChanging();
					this._hoursPerDayAvailable = value;
					this.SendPropertyChanged("hoursPerDayAvailable");
					this.OnhoursPerDayAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="devloper_task", Storage="_tasks", ThisKey="developerId", OtherKey="assignedTo")]
		public EntitySet<task> tasks
		{
			get
			{
				return this._tasks;
			}
			set
			{
				this._tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="devloper_project", Storage="_projects", ThisKey="developerId", OtherKey="leadDeveloper")]
		public EntitySet<project> projects
		{
			get
			{
				return this._projects;
			}
			set
			{
				this._projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.devloper = this;
		}
		
		private void detach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.devloper = null;
		}
		
		private void attach_projects(project entity)
		{
			this.SendPropertyChanging();
			entity.devloper = this;
		}
		
		private void detach_projects(project entity)
		{
			this.SendPropertyChanging();
			entity.devloper = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tasks")]
	public partial class task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _taskId;
		
		private int _assignedTo;
		
		private int _originalEstimatedHours;
		
		private int _hoursSpentOnTask;
		
		private int _project;
		
		private int _shareOfProject;
		
		private int _percentCompleted;
		
		private int _priority;
		
		private string _taskName;
		
		private System.DateTime _startDate;
		
		private System.DateTime _dueDate;
		
		private System.Nullable<int> _hoursForTasksWithHigherPriority;
		
		private EntityRef<devloper> _devloper;
		
		private EntityRef<project> _project1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntaskIdChanging(int value);
    partial void OntaskIdChanged();
    partial void OnassignedToChanging(int value);
    partial void OnassignedToChanged();
    partial void OnoriginalEstimatedHoursChanging(int value);
    partial void OnoriginalEstimatedHoursChanged();
    partial void OnhoursSpentOnTaskChanging(int value);
    partial void OnhoursSpentOnTaskChanged();
    partial void OnprojectChanging(int value);
    partial void OnprojectChanged();
    partial void OnshareOfProjectChanging(int value);
    partial void OnshareOfProjectChanged();
    partial void OnpercentCompletedChanging(int value);
    partial void OnpercentCompletedChanged();
    partial void OnpriorityChanging(int value);
    partial void OnpriorityChanged();
    partial void OntaskNameChanging(string value);
    partial void OntaskNameChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OndueDateChanging(System.DateTime value);
    partial void OndueDateChanged();
    partial void OnhoursForTasksWithHigherPriorityChanging(System.Nullable<int> value);
    partial void OnhoursForTasksWithHigherPriorityChanged();
    #endregion
		
		public task()
		{
			this._devloper = default(EntityRef<devloper>);
			this._project1 = default(EntityRef<project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int taskId
		{
			get
			{
				return this._taskId;
			}
			set
			{
				if ((this._taskId != value))
				{
					this.OntaskIdChanging(value);
					this.SendPropertyChanging();
					this._taskId = value;
					this.SendPropertyChanged("taskId");
					this.OntaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignedTo", DbType="Int NOT NULL")]
		public int assignedTo
		{
			get
			{
				return this._assignedTo;
			}
			set
			{
				if ((this._assignedTo != value))
				{
					if (this._devloper.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnassignedToChanging(value);
					this.SendPropertyChanging();
					this._assignedTo = value;
					this.SendPropertyChanged("assignedTo");
					this.OnassignedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_originalEstimatedHours", DbType="Int NOT NULL")]
		public int originalEstimatedHours
		{
			get
			{
				return this._originalEstimatedHours;
			}
			set
			{
				if ((this._originalEstimatedHours != value))
				{
					this.OnoriginalEstimatedHoursChanging(value);
					this.SendPropertyChanging();
					this._originalEstimatedHours = value;
					this.SendPropertyChanged("originalEstimatedHours");
					this.OnoriginalEstimatedHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hoursSpentOnTask", DbType="Int NOT NULL")]
		public int hoursSpentOnTask
		{
			get
			{
				return this._hoursSpentOnTask;
			}
			set
			{
				if ((this._hoursSpentOnTask != value))
				{
					this.OnhoursSpentOnTaskChanging(value);
					this.SendPropertyChanging();
					this._hoursSpentOnTask = value;
					this.SendPropertyChanged("hoursSpentOnTask");
					this.OnhoursSpentOnTaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_project", DbType="Int NOT NULL")]
		public int project
		{
			get
			{
				return this._project;
			}
			set
			{
				if ((this._project != value))
				{
					if (this._project1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprojectChanging(value);
					this.SendPropertyChanging();
					this._project = value;
					this.SendPropertyChanged("project");
					this.OnprojectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shareOfProject", DbType="Int NOT NULL")]
		public int shareOfProject
		{
			get
			{
				return this._shareOfProject;
			}
			set
			{
				if ((this._shareOfProject != value))
				{
					this.OnshareOfProjectChanging(value);
					this.SendPropertyChanging();
					this._shareOfProject = value;
					this.SendPropertyChanged("shareOfProject");
					this.OnshareOfProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentCompleted", DbType="Int NOT NULL")]
		public int percentCompleted
		{
			get
			{
				return this._percentCompleted;
			}
			set
			{
				if ((this._percentCompleted != value))
				{
					this.OnpercentCompletedChanging(value);
					this.SendPropertyChanging();
					this._percentCompleted = value;
					this.SendPropertyChanged("percentCompleted");
					this.OnpercentCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priority", DbType="Int NOT NULL")]
		public int priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string taskName
		{
			get
			{
				return this._taskName;
			}
			set
			{
				if ((this._taskName != value))
				{
					this.OntaskNameChanging(value);
					this.SendPropertyChanging();
					this._taskName = value;
					this.SendPropertyChanged("taskName");
					this.OntaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="DateTime NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dueDate", DbType="DateTime NOT NULL")]
		public System.DateTime dueDate
		{
			get
			{
				return this._dueDate;
			}
			set
			{
				if ((this._dueDate != value))
				{
					this.OndueDateChanging(value);
					this.SendPropertyChanging();
					this._dueDate = value;
					this.SendPropertyChanged("dueDate");
					this.OndueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hoursForTasksWithHigherPriority", DbType="Int")]
		public System.Nullable<int> hoursForTasksWithHigherPriority
		{
			get
			{
				return this._hoursForTasksWithHigherPriority;
			}
			set
			{
				if ((this._hoursForTasksWithHigherPriority != value))
				{
					this.OnhoursForTasksWithHigherPriorityChanging(value);
					this.SendPropertyChanging();
					this._hoursForTasksWithHigherPriority = value;
					this.SendPropertyChanged("hoursForTasksWithHigherPriority");
					this.OnhoursForTasksWithHigherPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="devloper_task", Storage="_devloper", ThisKey="assignedTo", OtherKey="developerId", IsForeignKey=true)]
		public devloper devloper
		{
			get
			{
				return this._devloper.Entity;
			}
			set
			{
				devloper previousValue = this._devloper.Entity;
				if (((previousValue != value) 
							|| (this._devloper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._devloper.Entity = null;
						previousValue.tasks.Remove(this);
					}
					this._devloper.Entity = value;
					if ((value != null))
					{
						value.tasks.Add(this);
						this._assignedTo = value.developerId;
					}
					else
					{
						this._assignedTo = default(int);
					}
					this.SendPropertyChanged("devloper");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="project_task", Storage="_project1", ThisKey="project", OtherKey="projectId", IsForeignKey=true)]
		public project project1
		{
			get
			{
				return this._project1.Entity;
			}
			set
			{
				project previousValue = this._project1.Entity;
				if (((previousValue != value) 
							|| (this._project1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._project1.Entity = null;
						previousValue.tasks.Remove(this);
					}
					this._project1.Entity = value;
					if ((value != null))
					{
						value.tasks.Add(this);
						this._project = value.projectId;
					}
					else
					{
						this._project = default(int);
					}
					this.SendPropertyChanged("project1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class subTask
	{
		
		public subTask()
		{
		}
	}
}
#pragma warning restore 1591
